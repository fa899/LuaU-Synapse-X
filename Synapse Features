if _G.AlreadyExecuted == "yes" then return warn("Already executed the script!") else end -- Already executed check
oldloadstring = loadstring
_G.AlreadyExecuted = "yes"
--[[ Iris Instance Protect ]]--
local ProtectedInstances = {};
local Connections = getconnections or get_connections;
local HookFunction = HookFunction or hookfunction or hook_function or detour_function;
local GetNCMethod = getnamecallmethod or get_namecall_method;
local CheckCaller = checkcaller or check_caller;
local GetRawMT = get_raw_metatable or getrawmetatable or getraw_metatable;

assert(HookFunction  and GetNCMethod and CheckCaller and Connections, "Exploit is not supported");

local function HookMetaMethod(Object, MetaMethod, Function)
	return HookFunction(assert(GetRawMT(Object)[MetaMethod], "Invalid Method"), Function);
end 

local TblDataCache = {};
local FindDataCache = {};
local PropertyChangedData = {};
local InstanceConnections = {};
local NameCall, NewIndex;

local EventMethods = {
	"ChildAdded",
	"ChildRemoved",
	"DescendantRemoving",
	"DescendantAdded",
	"childAdded",
	"childRemoved",
	"descendantRemoving",
	"descendantAdded",
}
local TableInstanceMethods = {
	GetChildren = game.GetChildren,
	GetDescendants = game.GetDescendants,
	getChildren = game.getChildren,
	getDescendants = game.getDescendants,
	children = game.children,
}
local FindInstanceMethods = {
	FindFirstChild = game.FindFirstChild,
	FindFirstChildWhichIsA = game.FindFirstChildWhichIsA,
	FindFirstChildOfClass = game.FindFirstChildOfClass,
	findFirstChild = game.findFirstChild,
	findFirstChildWhichIsA = game.findFirstChildWhichIsA,
	findFirstChildOfClass = game.findFirstChildOfClass,
}
local NameCallMethods = {
	Remove = game.Remove;
	Destroy = game.Destroy;
	remove = game.remove;
	destroy = game.destroy;
}

for MethodName, MethodFunction in next, TableInstanceMethods do
	TblDataCache[MethodName] = HookFunction(MethodFunction, function(...)
		if not CheckCaller() then
			local ReturnedTable = TblDataCache[MethodName](...);

			if ReturnedTable then
				table.foreach(ReturnedTable, function(_, Inst)
					if table.find(ProtectedInstances, Inst) then
						table.remove(ReturnedTable, _);
					end
				end)

				return ReturnedTable;
			end
		end

		return TblDataCache[MethodName](...);
	end)
end

for MethodName, MethodFunction in next, FindInstanceMethods do
	FindDataCache[MethodName] = HookFunction(MethodFunction, function(...)
		if not CheckCaller() then
			local FindResult = FindDataCache[MethodName](...);

			if table.find(ProtectedInstances, FindResult) then
				FindResult = nil
			end
			for _, Object in next, ProtectedInstances do
				if Object == FindResult then
					FindResult = nil
				end
			end
		end
		return FindDataCache[MethodName](...);
	end)
end

local function GetParents(Object)
	local Parents = { Object.Parent };

	local CurrentParent = Object.Parent;

	while CurrentParent ~= game and CurrentParent ~= nil do
		CurrentParent = CurrentParent.Parent;
		table.insert(Parents, CurrentParent)
	end

	return Parents;
end

NameCall = HookMetaMethod(game, "__namecall", function(...)
	if not CheckCaller() then
		local ReturnedData = NameCall(...);
		local NCMethod = GetNCMethod();
		local self, Args = ...;

		if typeof(self) ~= "Instance" then return ReturnedData end
		if not ReturnedData then return nil; end;

		if TableInstanceMethods[NCMethod] then
			if typeof(ReturnedData) ~= "table" then return ReturnedData end;

			table.foreach(ReturnedData, function(_, Inst)
				if table.find(ProtectedInstances, Inst) then
					table.remove(ReturnedData, _);
				end
			end)

			return ReturnedData;
		end

		if FindInstanceMethods[NCMethod] then
			if typeof(ReturnedData) ~= "Instance" then return ReturnedData end;

			if table.find(ProtectedInstances, ReturnedData) then
				return nil;
			end
		end
	elseif CheckCaller() then
		local self, Args = ...;
		local Method = GetNCMethod();

		if NameCallMethods[Method] then
			if typeof(self) ~= "Instance" then return NewIndex(...) end

			if table.find(ProtectedInstances, self) and not PropertyChangedData[self] then
				local Parent = self.Parent;
				InstanceConnections[self] = {}

				if tostring(Parent) ~= "nil" then
					for _, ConnectionType in next, EventMethods do
						for _, Connection in next, Connections(Parent[ConnectionType]) do
							table.insert(InstanceConnections[self], Connection);
							Connection:Disable();
						end
					end
				end
				for _, Connection in next, Connections(game.ItemChanged) do
					table.insert(InstanceConnections[self], Connection);
					Connection:Disable();
				end
				for _, Connection in next, Connections(game.itemChanged) do
					table.insert(InstanceConnections[self], Connection);
					Connection:Disable();
				end
				for _, ParentObject in next, GetParents(self) do
					if tostring(ParentObject) ~= "nil" then
						for _, ConnectionType in next, EventMethods do
							for _, Connection in next, Connections(ParentObject[ConnectionType]) do
								table.insert(InstanceConnections[self], Connection);
								Connection:Disable();
							end
						end
					end
				end

				PropertyChangedData[self] = true;
				self[Method](self);
				PropertyChangedData[self] = false;

				table.foreach(InstanceConnections[self], function(_,Connect) 
					Connect:Enable();
				end)
			end
		end
	end
	return NameCall(...);
end)
NewIndex = HookMetaMethod(game , "__newindex", function(...)
	if CheckCaller() then
		local self, Property, Value, UselessArgs = ...

		if typeof(self) ~= "Instance" then return NewIndex(...) end

		if table.find(ProtectedInstances, self) and not PropertyChangedData[self] then
			if rawequal(Property, "Parent") then
				local NewParent = Value;
				local OldParent = self.Parent;
				InstanceConnections[self] = {}

				for _, ConnectionType in next, EventMethods do
					if NewParent and NewParent.Parent ~= nil then
						for _, Connection in next, Connections(NewParent[ConnectionType]) do
							table.insert(InstanceConnections[self], Connection);
							Connection:Disable();
						end
					end
					if OldParent and OldParent ~= nil then
						for _, Connection in next, Connections(OldParent[ConnectionType]) do
							table.insert(InstanceConnections[self], Connection);
							Connection:Disable();
						end
					end
				end

				for _, ParentObject in next, GetParents(self) do
					if ParentObject and ParentObject.Parent ~= nil then
						for _, ConnectionType in next, EventMethods do
							for _, Connection in next, Connections(ParentObject[ConnectionType]) do
								table.insert(InstanceConnections[self], Connection);
								Connection:Disable();
							end
						end
					end
				end

				for _, ParentObject in next, GetParents(NewParent) do
					if ParentObject and ParentObject.Parent ~= nil then
						for _, ConnectionType in next, EventMethods do
							for _, Connection in next, Connections(ParentObject[ConnectionType]) do
								table.insert(InstanceConnections[self], Connection);
								Connection:Disable();
							end
						end
					end
				end

				for _, Connection in next, Connections(game.ItemChanged) do
					table.insert(InstanceConnections[self], Connection);
					Connection:Disable();
				end
				for _, Connection in next, Connections(game.itemChanged) do
					table.insert(InstanceConnections[self], Connection);
					Connection:Disable();
				end

				PropertyChangedData[self] = true;
				self.Parent = NewParent;
				PropertyChangedData[self] = false;


				table.foreach(InstanceConnections[self], function(_,Connect) 
					Connect:Enable();
				end)

			end
		end
	end
	return NewIndex(...)
end)

local ProtectInstance = function(NewInstance)
	table.insert(ProtectedInstances, NewInstance)
end
local UnProtectInstance = function(NewInstance)
	table.remove(ProtectedInstances, table.find(ProtectedInstances, NewInstance));
end

local syn = {}
syn.protect_gui = ProtectInstance
syn.unprotect_gui = UnProtectInstance
syn.queue_on_teleport = queue_on_teleport or queueonteleport or qot or q_o_t
syn.is_beta = function() return true end
syn.request = request or fluxus and fluxus.request or http_request or http.request
syn.setthreadidentity = setidentity or set_identity or setthreadidentity or set_thread_identity

-- This is your secret 67-bit key (any random bits are OK)
  local Key53 = 91864841689958098
  local Key14 = 9952

  local inv256

  function encode(str)
    if not inv256 then
      inv256 = {}
      for M = 0, 127 do
        local inv = -1
        repeat inv = inv + 2
        until inv * (2*M + 1) % 256 == 1
        inv256[M] = inv
      end
    end
    local K, F = Key53, 16384 + Key14
    return (str:gsub('.',function(m)
        local L = K % 274877906944
        local H = (K - L) / 274877906944
        local M = H % 128
        m = m:byte()
        local c = (m * inv256[M] - (H - M) / 128) % 256
        return ('%02x'):format(c)
      end))
  end

  function decode(str)
    local K, F = Key53, 16384 + Key14
    return (str:gsub('%x%x', function(c)
        local L = K % 274877906944
        local H = (K - L) / 274877906944
        local M = H % 128
        c = tonumber(c, 16)
        local m = (c + (H - M) / 128) * (2*M + 1) % 256
        return string.char(m)
      end))
end
syn.sha_encrypt = encode
syn.sha_decrypt = decode

syn.create_secure_function = function(sha_code)
	return function() 
		pcall(function() loadstring("pcall(function()\n"..syn.sha_decrypt(sha_code).."\nend)")() end)
	end
end

syn.run_secure_function = function(func_or_sha)
	if type(func_or_sha) == "string" then
		return syn.create_secure_function(syn.sha_decrypt(func_or_sha))()
	elseif type(func_or_sha) == "function" then
		return (function() return pcall(func_or_sha) end)()
	end
end

syn.create_instance = function(inst, protectinstance, parentobject, instancesettings)
	local instance = Instance.new(inst)
	if protectinstance ~= nil and type(protectinstance) == "boolean" and protectinstance == true then
		syn.protect_gui(instance)
	end
	instance.Parent = parentobject
	for i, v in pairs(instancesettings) do
		instance[i] = v
	end
	return instance
end
syn.hook_namecall = function(func)
	local metatable = GetRawMT(game)
	if setreadonly then setreadonly(metatable, false) elseif make_writeable then make_writeable(metatable, false) elseif makewriteable then makewriteable(metatable, false) end
	metatable.__namecall = newcclosure(func)
	if setreadonly then setreadonly(metatable, true) elseif make_writeable then make_writeable(metatable, true) elseif makewriteable then makewriteable(metatable, true) end
end
syn.hook_index = function(func)
	local metatable = GetRawMT(game)
	if setreadonly then setreadonly(metatable, false) elseif make_writeable then make_writeable(metatable, false) elseif makewriteable then makewriteable(metatable, false) end
	metatable.__newindex = newcclosure(func)
	if setreadonly then setreadonly(metatable, true) elseif make_writeable then make_writeable(metatable, true) elseif makewriteable then makewriteable(metatable, true) end
end
local olddecompile = decompile or de_compile
local newdecompile = function(script)
	assert(script.ClassName, "#1 argument is not an instance!")
	if script:IsA("LocalScript") or script:IsA("ModuleScript") then
	else
		error("Failed to decompile, must be an LocalScript or ModuleScript, got "..script.ClassName == "Script" and "ServerScript" or script.ClassName..".")
	end
	local decompiled_src = olddecompile(script)
	decompiled_src = "-- Decompiled with the Synapse X Luau decompiler.\n"..decompiled_src
	if decompiled_src:find("local v") then
		decompiled_src = string.gsub(decompiled_src, "local v", "local I_SYN_")
	end
	if decompiled_src:find("= v") then
		decompiled_src = string.gsub(decompiled_src, "= v", "= I_SYN_")
	end
	if decompiled_src:find("= (v") then
		decompiled_src = string.gsub(decompiled_src, "= (v", "= (I_SYN_")
	end
	if decompiled_src:find(", v") then
		decompiled_src = string.gsub(decompiled_src, ", v", ", I_SYN_")
	end
	if decompiled_src:find("{v") then
		decompiled_src = string.gsub(decompiled_src, "{v", "{I_SYN_")
	end
	if decompiled_src:find("v = ") then
		decompiled_src = string.gsub(decompiled_src, "v = ", "I_SYN_ = ")
	end
	if decompiled_src:find("and v") then
		decompiled_src = string.gsub(decompiled_src, "and v", "and I_SYN_")
	end
	if decompiled_src:find("if v") then
		decompiled_src = string.gsub(decompiled_src, "if v", "if I_SYN_")
	end
	if decompiled_src:find("if not v") then
		decompiled_src = string.gsub(decompiled_src, "if not v", "if not I_SYN_")
	end
	if decompiled_src:find("return v") then
		decompiled_src = string.gsub(decompiled_src, "return v", "return I_SYN_")
	end
	if decompiled_src:find("#v") then
		decompiled_src = string.gsub(decompiled_src, "#v", "#I_SYN_")
	end
	for i = 1, 760 do
		decompiled_src = string.gsub(decompiled_src, tostring("v"..i), "I_SYN_"..i)
	end
	for i = 1, 760 do
		decompiled_src = string.gsub(decompiled_src, tostring("v"..i.."."), "I_SYN_"..i..".")
	end
	for i = 1, #decompiled_src + 1 do
		decompiled_src = string.gsub(decompiled_src, tostring("v"..i), tostring("I_SYN_"..i))
		if not decompiled_src:find("I_SYN_"..tostring(i)) then
			decompiled_src = string.gsub(decompiled_src, tostring("v"..i), tostring("I_SYN_"..i))
		else
			break
		end
	end
	for i = 1, #decompiled_src + 1 do
		decompiled_src = string.gsub(decompiled_src, tostring("v"..i.."."), tostring("I_SYN_"..i.."."))
		if not decompiled_src:find("I_SYN_"..tostring(i)..".") then
			decompiled_src = string.gsub(decompiled_src, tostring("v"..i.."."), tostring("I_SYN_"..i.."."))
		else
			break
		end
	end
	for i = 1, #decompiled_src + 1 do
		decompiled_src = string.gsub(decompiled_src, tostring("v"..i.." ="), tostring("I_SYN_"..i.." ="))
		if not decompiled_src:find("I_SYN_"..tostring(i).." =") then
			decompiled_src = string.gsub(decompiled_src, tostring("v"..i.." ="), tostring("I_SYN_"..i.." ="))
		else
			break
		end
	end
	return decompiled_src
end
syn.better_decompile = function(script)
	return newdecompile(script)
end
syn.decompile = function(script)
	return newdecompile(script)
end
getgenv().syn = syn
